import React, { useRef, useState, useEffect } from "react";
import { useRecoilState, useRecoilValue } from "recoil";
import { useNavigate } from 'react-router-dom';
import { productListState } from "../../store/recoil/productListState";
import { productListStateMultilingual } from "../../store/recoil/productListStateMultilingual";
import { userState } from "../../store/recoil/userState";
import { modalState } from "../../store/recoil/modalState";
import { Splide, SplideSlide } from "@splidejs/react-splide";
import useSessionCheck from '../../hooks/useSessionCheck'
import * as queries from "../../restapi/queries";
import '@splidejs/splide/css'; 
import {useIntl} from 'react-intl'
import { instance } from '../../services/axios.js';
import { debugState } from "../../store/recoil/debugState";

// React Splide
// https://ja.splidejs.com/integration/react-splide/

///////////////////
let gachaRemainingCount;
let gachaTotalCount;
let gachaSinglePoint;
let gachaRemainingDisplayFlag;
let gachaViewFlag;
let gachaSoldOutFlag;
let gachaPostStartDate;
let gachaStartDate;
let gachaEndDate;
let gachaDisplay;
let gachaStartDateTime;
let gachaStartRemainingTime;
let gachaStartRemainingDay;
let gachaStartRemainingMinutes;
let gachaStartRemainingHour;
let gachaStartRemainingSeconds;
let gachaPostStartDateExceed = true
let gachaStartDateExceed = true
let gachaEndDateExceed = false
let gachaOutOfStock = false
let nowCount;
let numberOfDigits;
let envCurrentName;
///////////////////


export const Slider = () => {
    const intl = useIntl()
    const navigate = useNavigate();
    const [UserStateObj, setUserState] = useRecoilState(userState);
    const [modalStateValue, setModalState] = useRecoilState(modalState);
    const [debugStateValue, setDebugState] = useRecoilState(debugState);
    //  „Çπ„É©„Ç§„ÉÄ„Éº„ÅÆÁõ£Ë¶ñ
    const SplideRef = useRef(null);
    //  „Çπ„É©„Ç§„ÉÄ„Éº„ÅåÁîªÈù¢„ÅÆ‰∏≠„Å´„ÅÇ„Çã„Åã„Å©„ÅÜ„Åã
    const [isSplideInView, setIsSplideInView] = useState(false);
    //  „É¶„Éº„Ç∂„Éº„Å´Ââ≤„ÇäÂΩì„Å¶„Çâ„Çå„ÅüÂà©Áî®Ë®ÄË™û
    // console.log("[Slider]UserStateObj=>", UserStateObj)
    let languageResource = UserStateObj.languageResource;
    // console.log("[Slider]languageResource=>", languageResource)
    /////////////////////////////////////
    //  API„Åã„Çâ„ÅÆËøîÂç¥„ÅåÂ§öË®ÄË™û„ÅÆÂ†¥Âêà
    //  const [productListArray, setProductList] = useRecoilState(productListStateMultilingual);
    //  const translationObj = productListArray[languageResource];
    //  console.log("[Slider]translationObj=>", translationObj)
    /////////////////////////////////////
    // API„Åã„Çâ„ÅÆËøîÂç¥„ÅåÂçòË®ÄË™û„ÅÆÂ†¥Âêà
    const [productListArraySingle, setProductListSingle] = useRecoilState(productListState);
    const translationObj = productListArraySingle;
    // console.log("[Slider]productListArray_old=>", productListArraySingle)
    // console.log("[Slider]translationObj=>", translationObj)
    const { getSessionCheck } = useSessionCheck();

    //  „Éö„Éº„Ç∏ÈÅ∑Áßª
    function go2gacha(e) {
        navigate('/pack/p-' + e.data.gachaId);
    }
    ///////////////////////////////////////////////
    //  Áí∞Â¢ÉÂêç„ÅÆÂà§ÂÆö
    if(UserStateObj.currentEnv === 'cardel-mirror'){
        envCurrentName = '„äôÔ∏éË£èÈù¢';
    }else if(UserStateObj.currentEnv === 'cardel-develop'){
        envCurrentName = '‚ù§Ô∏èÈñãÁô∫';
    }else if(UserStateObj.currentEnv === 'cardel-localhost'){
        envCurrentName = 'üè†Âú∞ÂÖÉ';
    }else if(UserStateObj.currentEnv === 'cardel-staging'){
        envCurrentName = '‚úãÊ§úË®º';
    }
    else {
        envCurrentName = '';
    }
    //  Áí∞Â¢ÉÂêç„ÅÆÂà§ÂÆö
    ///////////////////////////////////////////////


 
    ///////////////////////////////////////////////
    //  „É¢„Éº„ÉÄ„É´„ÅåËµ∑Âãï„Åó„Å¶„ÅÑ„ÇãÊôÇ„ÅØ„Çπ„É©„Ç§„ÉÄ„ÉºÂÅúÊ≠¢
    //  „É¢„Éº„ÉÄ„É´„ÅåÁµÇ‰∫Ü„Åó„Åü„Çâ„Çπ„É©„Ç§„ÉÄ„Éº„ÅÆÂÜçÈñã
    //  ÁîªÈù¢„Å´Êò†„Å£„Å¶„Å™„Åë„Çå„Å∞ÂÅúÊ≠¢„ÉªÁîªÈù¢„Å´Êò†„Å£„Åü„ÇâÂÜçÈñã„ÇÇÂÆüË£Ö„Åô„Çã„Åì„Å®Ôºë
    useEffect(() => {
        if(modalStateValue.BaseModalOpen){
            SplideRef.current.splide.Components.Autoplay.pause()
        }else{
            SplideRef.current.splide.Components.Autoplay.play()
        }
    }, [modalStateValue.BaseModalOpen])
    //
    ///////////////////////////////////////////////


    ///////////////////////////////////////////////
    //  „Çπ„É©„Ç§„ÉÄ„ÉºË°®Á§∫Êù°‰ª∂
    //  Â§ßÊñπÈáùÔºöË≤∑„Åà„Çã„ÇÇ„ÅÆ„Å†„ÅëË°®Á§∫„Åô„Çã
    //
    //  ÔºàÔºëÔºâÂú®Â∫´„Åå„ÅÇ„ÇãÔºàÂ£≤„ÇäÂàá„Çå„Åß„ÅØ„Å™„ÅÑÔºâ
    //  ÔºàÔºíÔºâË≤©Â£≤ÁµÇ‰∫ÜÊó•ÊôÇ„Çà„ÇäÂæåÔºàË≤∑„Åà„ÇãÁä∂ÊÖãÔºâ
    //
    ///////////////////////////////////////////////

    ///////////////////////////////
    //  ÁèæÂú®ÊôÇÂàªUTC„ÅÆÁ∂≠ÊåÅ
    //  ÂàùÊúüÂÄ§„ÅØ‰ªä
    //  „Ç´„Ç¶„É≥„Éà„ÉÄ„Ç¶„É≥„Åå„Å™„ÅÑ„ÅÆ„Åß„Åì„Åì„ÅØÔºëÂàÜÊõ¥Êñ∞„ÅßËâØ„ÅÑ
    //
    // const currentDateTimeUTC = UserStateObj.currentDateTimeUTC;
    const [currentDateTimeUTC, setCurrentDateTimeUTC] = useState(Date.now());
    let tick = () => {
        setCurrentDateTimeUTC(Date.now());
        // console.log("[Play]currentDateTimeUTC==>",currentDateTimeUTC)
    };
    setInterval(tick, 60000);
    //
    //////////////////////////////
    //  Â£≤„ÇäÂàá„ÇåË°®Á§∫ÊúÄÁµÇÂà§ÂÆö
    function displayOutOfStock(e) {
        // console.log('[ProductList]function displayOutOfStock=>e.gachaSoldOutFlag==>',e.gachaSoldOutFlag);
        if(e.gachaSoldOutFlag){
            //  ‚ùóÔ∏èÂ£≤„ÇäÂàá„ÇåË°®Á§∫Á¢∫ÂÆö
            gachaDisplay = 'soldout';
            //  ‚ùóÔ∏èË≤©Â£≤„Åß„Åç„ÇãÂïÜÂìÅ„ÅåÔºê„Å´„Å™„Çã
            gachaRemainingCount = 0;
        }else{
            //  ‚ùóÔ∏èÈùûË°®Á§∫Á¢∫ÂÆö
            gachaDisplay = 'hidden';
        }
    }
    //  Â£≤„ÇäÂàá„ÇåË°®Á§∫ÊúÄÁµÇÂà§ÂÆö
    //////////////////////////////


    /////////////////////////////////////
    // „Éù„Ç§„É≥„Éà„ÉÅ„É£„Éº„Ç∏Ëµ∑Âãï
    async function doCharge(e) {
        // console.log("[Header]charge e==>", e);
        //sessionCheck if success then show Charge Modal else show login modal


        let openData = e;
        //loader
        setModalState((prevState) => ({
            ...prevState,
            BaseModalOpen: true,
            modalType: 'Loading',
            // mode: "",
            // data: {}
        }))
        let response;
        // check-session„Å´ÂïèÈ°å„Å™„Åó
        if (await getSessionCheck(doCharge,e)) {
            //SessionCheckSuccess display ChargeModal

            try {
                const config = {
                    method: queries.getMethod,
                    url: queries.baseURL + queries.readPoint,
                }
    
                const response = await instance.request(config);
                console.log('response', response)
                if (response.status == 200) {
                    const {records = {}} = response.data || {};

                    setUserState(prevState => ({...prevState, myChargeList : records}))

                    setModalState((prevState) => ({
                        ...prevState,
                        BaseModalOpen: true,
                        modalType: 'charge',
                        mode: "purchase",
                        data: {}
                    }))
                }
            } catch (err) {
                console.log("err >>>", err);

                let mData = {
                    title: "",
                    body: intl.formatMessage({ id: "A_system_error_has_occurred__Please_try_again" }),
                };

                setModalState((prevState) => ({
                    ...prevState,
                    BaseModalOpen: true,
                    modalType: "error",
                    data: mData
                }))
                
            } 
        }
    }
    // „Éù„Ç§„É≥„Éà„ÉÅ„É£„Éº„Ç∏Ëµ∑Âãï
    /////////////////////////////////////


    return (
    
        <section id="slider" className="py-4 sm:py-5 md:py-8 lg:py-12 xl:py-24">
        <Splide
            ref={SplideRef}
            aria-label={intl.formatMessage({ id: 'Pick_up_items' })}
            options={{
                autoplay: true, // Ëá™ÂãïÂÜçÁîü„ÇíÊúâÂäπ
                // autoplay: 'pause',
                // intersection: {
                //   inView: {
                //     autoplay: true,
                //   },
                //   outView: {
                //     autoplay: false,
                //   },
                // },
                interval: 3000, // Ëá™ÂãïÂÜçÁîü„ÅÆÈñìÈöî„Çí3Áßí„Å´Ë®≠ÂÆö
                // interval: 1000, // „ÉÜ„Çπ„ÉàÁî®
                speed: 1200,
                pauseOnHover: true, // „Çπ„É©„Ç§„ÉÄ„Éº„ÅÆ‰∏ä„Å´„Éû„Ç¶„Çπ„Ç´„Éº„ÇΩ„É´„Åå‰πó„Å£„Åü„Å®„Åç„ÄÅ„Çπ„ÇØ„É≠„Éº„É´„ÇíÂÅúÊ≠¢
                //   rewind: true, // ÊúÄÂæå„ÅÆ„Çπ„É©„Ç§„Éâ„Å´ÈÅî„Åó„ÅüÈöõ„ÄÅÊúÄÂàù„Å´Â∑ª„ÅçÊàª„Åô
                type   : 'loop', // „É´„Éº„ÉóÔºà„Ç´„É´„Éº„Çª„É´Ôºâ„Çπ„É©„Ç§„ÉÄ„Éº
                // autoWidth: true,
                autoHeight: true,
                perPage: 4,
                // start: 0,
                cloneStatus: true, //
                focus: 'center',    //is-active„ÇØ„É©„Çπ„Çí„ÇØ„É≠„Éº„É≥„Å´„ÇÇËøΩÂä†„Åô„Çã„Åã„Å©„ÅÜ„Åã„ÇíÊ±∫ÂÆö„Åó„Åæ„Åô„ÄÇ
                // isNavigation: true,
                gap: 32,
                lazyLoad: true,
                arrows: false,
                pagination: false,
                preloadPages: 3,
                breakpoints: {
                        280: {
                            perPage: 1,
                            // fixedWidth: '100%',
                            // height: 180,
                            gap: 0,
                            heightRatio:0.67,
                            autoHeight: false,
                            // padding: { top: 20, bottom: 20 }
                        },
                        640: {
                            perPage: 1,
                            gap: 0,
                            // heightRatio:0.67,
                            // autoHeight: false,
                        },
                        768: {
                            perPage: 2,
                        },
                        960: {
                            perPage: 2,
                        },
                        1024: {
                            perPage: 2,
                        },
                        1280: {
                            perPage: 3,
                        },
                        1536: {
                            perPage: 3,
                            gap: 32,
                        },
                        1920: {
                            perPage: 4,
                            gap: 32,
                        },
                    },
                classes: {
                'slide': 'slideClasses',

            }
            }}
        >
            {UserStateObj.currentEnv === 'cardel-product' || UserStateObj.currentEnv === 'cardel-develop'
            ?   //  Êú¨Áï™„Å™„ÇâÁí∞Â¢ÉË°®Á§∫„Ç´„Éº„Éâ„Å†„Åï„Å™„ÅÑ
            <></>
            :
            <SplideSlide
                key='currentEnv'
                slide={`Áí∞Â¢ÉÁ¢∫Ë™ç | „Ç´„Éº„Éá„É´ „Ç™„É™„ÉëÂÖ¨Âºè„Çµ„Ç§„Éà`}

            >
                <div className="itemWrap slide-img rounded-md flex flex-col">
                    <div class="point-exchange grow flex flex-col items-center justify-center h-full">
                        <p class="text-7xl xs:text-8xl sm:text-9xl font-black font-Roboto">{envCurrentName}</p>
                        {
                        UserStateObj.currentEnv === 'cardel-mirror'
                        ?   //  „Éü„É©„Éº„ÅÆÊôÇ„Å†„ÅëÊ≥®ÊÑè‰∫ãÈ†ÖË°®Á§∫
                        <ul className="text-center">
                            <label className="font-bold pb-2">Ë£è„Ç´„Éº„Éá„É´Ê≥®ÊÑè‰∫ãÈ†Ö</label>
                            <li className="text-xs">„Ç´„Éº„ÉâÂú®Â∫´„ÅØÊú¨Áï™„Å®ÂÖ±ÈÄöÁÆ°ÁêÜ„Å´„Å™„Çä„Åæ„Åô</li>
                            <li className="text-xs">Ë£èÈù¢„ÅßÊè°„ÇäÁ∂ö„Åë„Çã„Å®Êú¨Áï™„Åß‰ΩøÁî®„Åß„Åç„Å™„Åè„Å™„Çä„Åæ„Åô</li>
                            <li className="text-xs">Áç≤Âæó„Åó„Åü„Ç´„Éº„Éâ„ÅØÂÖ®„Å¶pt‰∫§Êèõ„Åó„Å¶‰∏ã„Åï„ÅÑ</li>
                        </ul>
                        :   //  „Éü„É©„Éº‰ª•Â§ñ„ÅØÊ≥®ÊÑè‰∫ãÈ†ÖË°®Á§∫„Åó„Å™„ÅÑ
                        <></>
                        }
                    </div>
                </div>
            </SplideSlide>
            }

            {/* {Object.keys(translationObj).map((productKey) => { */}
            {Object.keys(translationObj).map((productKey) => {
                // console.log("[Slider]productKey===>", productKey)
                // console.log("[Slider]translationObj[productKey]===>", translationObj[productKey])
                // console.log("[Slider]translationObj[productKey].gachaTranslateImageMain===>", translationObj[productKey].gachaTranslateImageMain)

                /////////////////////////////////
                //  „Åì„ÅÆÂïÜÂìÅ„ÇíË°®Á§∫„Åô„Åπ„Åç„Åã„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ
                /////////////////////////////////
                //
                //
                ///////////////////////////////
                // set fron json
                ///////////////////////////////
                // gachaRemainingCount = Math.floor( Math.random() * ( 30000 - 0 ) + 0);
                // gachaRemainingCount = 2;
                gachaRemainingCount = translationObj[productKey].gachaRemainingCount;
                // gachaTotalCount = 30000; // set dummy
                gachaTotalCount = translationObj[productKey].gachaTotalCount;
                // gachaSinglePoint = 99999 // set dummy
                gachaSinglePoint =  translationObj[productKey].gachaSinglePoint;
                gachaRemainingDisplayFlag = translationObj[productKey]?.gachaRemainingDisplayFlag;
                //  „Ç¨„ÉÅ„É£Ë°®Á§∫„Éï„É©„Ç∞„ÄÇÂú®Â∫´ÔºêorÊúüÈñìÁµÇ‰∫Ü„Åæ„Åß„ÅØÊúÄÂÑ™ÂÖà„ÄÅÈÄÜ„Å´Âú®Â∫´ÔºêorÊúüÈñìÁµÇ‰∫ÜÂæå„ÅØ‰ΩúÁî®„Åó„Å™„ÅÑ
                gachaViewFlag = translationObj[productKey]?.gachaViewFlag;
                // Â£≤„ÇäÂàá„ÇåË°®Á§∫„Éï„É©„Ç∞„ÄÇÂú®Â∫´ÔºêorÊúüÈñìÁµÇ‰∫ÜÂæå„Å´‰ΩúÁî®„Åô„Çã„ÄÇ„Ç¨„ÉÅ„É£Ë°®Á§∫„Éï„É©„Ç∞„Çà„ÇäÂÑ™ÂÖà
                gachaSoldOutFlag = translationObj[productKey]?.gachaSoldOutFlag;
                gachaPostStartDate = translationObj[productKey]?.gachaPostStartDate;
                gachaStartDate = translationObj[productKey]?.gachaStartDate;
                gachaEndDate = translationObj[productKey]?.gachaEndDate;
                ///////////////////////////////

                ///////////////////////////////
                //  GachaDisplay„ÇíÂà§ÂÆö„Åó„Å¶„ÅÑ„Åè„Åü„ÇÅ„Å´
                //  ÂêÑÁä∂ÊÖã„ÅÆ„Éï„É©„Ç∞Âåñ
                //  hidden, countdown, display, soldout
                //  setGachaDisplay('')
                //  ‚ÄºÔ∏èË≤©Â£≤ÁµÇ‰∫Ü„ÅßÂú®Â∫´0„Å´„Åô„Çã
                //
                //  Ë°®Á§∫ÈñãÂßãÊó•„ÇíË∂ÖÈÅé„Åó„Å¶„ÅÑ„Çã„Åã„Å©„ÅÜ„ÅãÔºü
                gachaPostStartDateExceed = true;
                if(currentDateTimeUTC >= gachaPostStartDate){
                    // console.log("[ProductList]gachaPostStartDateExceed", currentDateTimeUTC, ">", gachaPostStartDate)
                    // console.log("[ProductList]",productKey,"Ë°®Á§∫ÈñãÂßãÊó•ÊôÇ„ÇíË∂ÖÈÅé„Åó„Å¶„ÅÑ„Çã", currentDateTimeUTC, ">", gachaPostStartDate)
                    //  Ë°®Á§∫ÈñãÂßãÊó•ÊôÇ„ÇíË∂ÖÈÅé„Åó„Å¶„ÅÑ„Çã
                    gachaPostStartDateExceed = true;
                }else if(currentDateTimeUTC < gachaPostStartDate){
                    // console.log("[ProductList]",productKey,"Ë°®Á§∫ÈñãÂßãÊó•ÊôÇ„ÇíË∂ÖÈÅé„Åó„Å¶„ÅÑ„Å™„ÅÑ", currentDateTimeUTC, ">", gachaPostStartDate)
                    //  Ë°®Á§∫ÈñãÂßãÊó•ÊôÇ„ÇíË∂ÖÈÅé„Åó„Å¶„ÅÑ„Å™„ÅÑ
                    gachaPostStartDateExceed = false;   //  Âøµ„ÅÆÁÇ∫
                }else{
                    // console.log("[ProductList]",productKey,"Ë°®Á§∫ÈñãÂßãÊó•ÊôÇ„ÇíÂà§Êñ≠„Åß„Åç„Å™„ÅÑ", currentDateTimeUTC, ">", gachaPostStartDate)
                    gachaPostStartDateExceed = true;
                }
                //  „Ç¨„ÉÅ„É£ÈñãÂßãÊó•„ÇíË∂ÖÈÅé„Åó„Å¶„ÅÑ„Çã„Åã„Å©„ÅÜ„ÅãÔºü
                if(currentDateTimeUTC > gachaStartDate){
                    // console.log("[ProductList]gachaStartDateExceed", currentDateTimeUTC, ">", gachaStartDate)
                    //  „Ç¨„ÉÅ„É£ÈñãÂßãÊó•„ÇíË∂ÖÈÅé„Åó„Å¶„ÅÑ„Çã
                    gachaStartDateExceed = true;
                }else if(currentDateTimeUTC <= gachaStartDate){
                    // console.log("[ProductList]„Ç¨„ÉÅ„É£ÈñãÂßãÊó•„ÇíË∂ÖÈÅé„Åó„Å¶„ÅÑ„Å™„ÅÑ", currentDateTimeUTC, "<", gachaStartDate)
                    //  „Ç¨„ÉÅ„É£ÈñãÂßãÊó•„ÇíË∂ÖÈÅé„Åó„Å¶„ÅÑ„Å™„ÅÑ
                    gachaStartDateExceed = false;   //  Âøµ„ÅÆÁÇ∫
                    //  ÈñãÂßãÊó•
                    gachaStartDateTime = gachaStartDate
                    // console.log("[ProductList]gachaStartDateTime", gachaStartDateTime)
                    //  ÊÆã„Çä„ÅÆÊôÇÈñì
                    gachaStartRemainingTime = gachaStartDate - currentDateTimeUTC - 4000; //ÈñãÂßã„ÅÆÁû¨Èñì„ÅÆÊºîÂá∫„ÅÆ„Åü„ÇÅÊï∞ÁßíÊôÇË®à„ÇíÈÅÖ„Çâ„Åõ„Çã
                    gachaStartRemainingDay = Math.floor(gachaStartRemainingTime/1000/60/60/24);
                    gachaStartRemainingHour = Math.floor(gachaStartRemainingTime/1000/60/60)%24;
                    gachaStartRemainingMinutes = Math.floor(gachaStartRemainingTime/1000/60)%60;
                    gachaStartRemainingSeconds = Math.floor(gachaStartRemainingTime/1000)%60;
                }else{
                    //  „Ç¨„ÉÅ„É£ÈñãÂßãÊó•„ÇíË∂ÖÈÅé„Åó„Å¶„ÅÑ„Çã„ÅãÂà§ÂÆö„Åß„Åç„Å™„ÅÑ
                    gachaStartDateExceed = true;
                }
                //  „Ç¨„ÉÅ„É£ÁµÇ‰∫ÜÊó•„ÇíË∂ÖÈÅé„Åó„Å¶„ÅÑ„Çã„Åã„Å©„ÅÜ„ÅãÔºü
                if(currentDateTimeUTC >= gachaEndDate){
                    // console.log("[ProductList]gachaEndDateExceed", currentDateTimeUTC, ">", gachaEndDate)
                    //  „Ç¨„ÉÅ„É£ÁµÇ‰∫ÜÊó•„ÇíË∂ÖÈÅé„Åó„Å¶„ÅÑ„Çã
                    gachaEndDateExceed = true;
                    }else{
                    //  „Ç¨„ÉÅ„É£ÁµÇ‰∫ÜÊó•„ÇíË∂ÖÈÅé„Åó„Å¶„ÅÑ„Å™„ÅÑ
                    // console.log("[ProductList]„Ç¨„ÉÅ„É£ÁµÇ‰∫ÜÊó•„ÇíË∂ÖÈÅé„Åó„Å¶„ÅÑ„Å™„ÅÑ", currentDateTimeUTC, "<", gachaEndDate)
                    gachaEndDateExceed = false;   //  Âøµ„ÅÆÁÇ∫
                }
                //  „Ç¨„ÉÅ„É£ÂÆåÂ£≤„Åó„Å¶„ÅÑ„Çã„Åã„Å©„ÅÜ„ÅãÔºü
                //  Âøµ„ÅÆÁÇ∫„Éû„Ç§„Éä„Çπ„ÇÇËÄÉÊÖÆ
                if(gachaRemainingCount <= 0){
                    // console.log("[ProductList]gachaRemainingCount", gachaRemainingCount)
                    //  „Ç¨„ÉÅ„É£ÂÆåÂ£≤„Åó„Å¶„ÅÑ„Çã
                    gachaOutOfStock = true;
                }else{
                    //  „Ç¨„ÉÅ„É£ÂÆåÂ£≤„Åó„Å¶„ÅÑ„Å™„ÅÑ
                    gachaOutOfStock = false;   //  Âøµ„ÅÆÁÇ∫
                }
                ////////////////////////
                //  GachaDisplay„ÅÆÂà§Êñ≠
                ////////////////////////
                if(gachaViewFlag){
                    //  Áô∫Â£≤ÂâçË°®Á§∫„Éï„É©„Ç∞=Ë°®Á§∫
                    if(gachaPostStartDateExceed){
                        //  Ë°®Á§∫ÈñãÂßãÊôÇÂàªÔºùË∂ÖÈÅé
                        if(gachaStartDateExceed){
                            //  Ë≤©Â£≤ÈñãÂßãÊôÇÂàªÔºùË∂ÖÈÅé
                            if(gachaOutOfStock){
                                //  Âú®Â∫´Áä∂ÊÖãÔºùÂÆåÂ£≤
                                displayOutOfStock({gachaSoldOutFlag:gachaSoldOutFlag});
                            }else{
                                //  Âú®Â∫´Áä∂ÊÖãÔºùÂú®Â∫´„ÅÇ„Çä
                                if(gachaEndDateExceed){
                                    //  „Ç¨„ÉÅ„É£ÁµÇ‰∫ÜÊó•=Ë∂ÖÈÅé
                                    displayOutOfStock({gachaSoldOutFlag:gachaSoldOutFlag});
                                }else{
                                    //  „Ç¨„ÉÅ„É£ÁµÇ‰∫ÜÊó•=Êú™Ë∂ÖÈÅé
                                    //  ‚ùóÔ∏èÈÄöÂ∏∏Ë°®Á§∫Á¢∫ÂÆö
                                    gachaDisplay = 'display';
                                }
                            }
                        }else{
                            //  Ë≤©Â£≤ÈñãÂßãÊôÇÂàªÔºùÊú™Ë∂ÖÈÅé
                            //  ‚ùóÔ∏è„Ç´„Ç¶„É≥„Éà„ÉÄ„Ç¶„É≥Ë°®Á§∫Á¢∫ÂÆö
                            gachaDisplay = 'countdown';
                        }
                    }else{
                        //  Ë°®Á§∫ÈñãÂßãÊôÇÂàªÔºùÊú™Ë∂ÖÈÅé
                        if(gachaStartDateExceed){
                            //  Ë≤©Â£≤ÈñãÂßãÊôÇÂàªÔºùË∂ÖÈÅé
                            //  Ë®≠ÂÆöË™§„Çä„ÅßË°®Á§∫ÈñãÂßãÊôÇÂàª„Çà„ÇäÂâç„Å´Ë≤©Â£≤„ÅåÈñãÂßã„Åï„Çå„Çã„Ç±„Éº„Çπ
                            //  ‰∫àÂëä„Å™„Åó„Å´„ÅÑ„Åç„Å™„ÇäÂá∫Áèæ
                            if(gachaOutOfStock){
                                //  Âú®Â∫´Áä∂ÊÖãÔºùÂÆåÂ£≤
                                //  ‰Ωï„Çâ„Åã„ÅÆÊìç‰Ωú„ÅßÂú®Â∫´„Çº„É≠„ÅßÈñãÂßã„ÇíËøé„Åà„Çã
                                displayOutOfStock({gachaSoldOutFlag:gachaSoldOutFlag});
                            }else{
                                //  Âú®Â∫´Áä∂ÊÖãÔºùÂú®Â∫´„ÅÇ„Çä
                                if(gachaEndDateExceed){
                                    //  „Ç¨„ÉÅ„É£ÁµÇ‰∫ÜÊó•=Ë∂ÖÈÅé
                                    displayOutOfStock({gachaSoldOutFlag:gachaSoldOutFlag});
                                }else{
                                    //  „Ç¨„ÉÅ„É£ÁµÇ‰∫ÜÊó•=Êú™Ë∂ÖÈÅé
                                    //  ‚ùóÔ∏èÈÄöÂ∏∏Ë°®Á§∫Á¢∫ÂÆö
                                    gachaDisplay = 'display';
                                }
                            }
                        }else{
                            //  Ë≤©Â£≤ÈñãÂßãÊôÇÂàªÔºùÊú™Ë∂ÖÈÅé
                            //  ‚ùóÔ∏èÈùûË°®Á§∫Á¢∫ÂÆö
                            gachaDisplay = 'hidden';
                        }
                    }
                }else{
                    //  Áô∫Â£≤ÂâçË°®Á§∫„Éï„É©„Ç∞=ÈùûË°®Á§∫
                    if(gachaOutOfStock){
                        //  Âú®Â∫´Áä∂ÊÖãÔºùÂÆåÂ£≤
                        displayOutOfStock({gachaSoldOutFlag:gachaSoldOutFlag});
                    }else{
                        //  Âú®Â∫´Áä∂ÊÖãÔºùÂú®Â∫´„ÅÇ„Çä
                        if(gachaEndDateExceed){
                            //  „Ç¨„ÉÅ„É£ÁµÇ‰∫ÜÊó•=Ë∂ÖÈÅé
                            displayOutOfStock({gachaSoldOutFlag:gachaSoldOutFlag});
                        }else{
                            //  „Ç¨„ÉÅ„É£ÁµÇ‰∫ÜÊó•=Êú™Ë∂ÖÈÅé
                            //  ‚ùóÔ∏èÈùûË°®Á§∫Á¢∫ÂÆö
                            gachaDisplay = 'hidden';
                        }
                    }
                }
                //
                //  GachaDisplay„ÇíÂà§ÂÆö„Åó„Å¶„ÅÑ„Åè„Åü„ÇÅ„Å´
                //  ÂêÑÁä∂ÊÖã„ÅÆ„Éï„É©„Ç∞Âåñ
                ///////////////////////////////
                return (
                    <>
                    
                    {
                    translationObj[productKey].gachaCarouselFlag ?
                    //  „Ç´„É´„Éº„Çª„É´„Å´Ë°®Á§∫„Åô„Çã„Éï„É©„Ç∞true
                        gachaDisplay === 'display' ?
                        //  gachaDisplay„ÅÆÂà§ÂÆöÁµêÊûú„ÅåÈÄöÂ∏∏Ë°®Á§∫
                            (
                                <SplideSlide 
                                    key={`${productKey}`}
                                    slide={`${translationObj[productKey].gachaTranslateName} | ${intl.formatMessage({ id: 'CARDEL' })} ${intl.formatMessage({ id: 'official_site' })}`}
                                    onClick={(e) => go2gacha({data:translationObj[productKey]})}
                                    className="cursor-pointer"
                                >
                                    <img className="slide-img rounded-md" src={`${translationObj[productKey].gachaTranslateImageMain}`} alt={`${translationObj[productKey].gachaTranslateName}-thumbnail | ${intl.formatMessage({ id: 'CARDEL' })} ${intl.formatMessage({ id: 'official_site' })}`} />
                                </SplideSlide>
                            )
                            :
                            (<></>)
                    :
                    (<></>)
                    }
                    </>
                );
            })}
            {/* ÂïÜÂìÅ‰∏ÄË¶ß‰ª•Â§ñ„ÅÆSNSÁôªÈå≤‰øÉÈÄ≤„ÇÑ„ÅäÁü•„Çâ„Åõ„Å™„Å©„ÇíTOP„Å´Ââ≤„ÇäËæº„Åæ„Åõ„Çã */}
            {/* „Éë„ÉÉ„ÇØ„Åã„Çâ„ÅÆ„Ç´„É´„Éº„Çª„É´„ÅåË°®Á§∫„Åï„Çå„Çã„ÅÆ„ÅßÊí§Âéª */}
            <SplideSlide
                key='bank-payment'
                slide={`ÈäÄË°åÊ±∫Ê∏àÂ∞éÂÖ• | „Ç´„Éº„Éá„É´ „Ç™„É™„ÉëÂÖ¨Âºè„Çµ„Ç§„Éà`}
                onClick={() => navigate('/bank-payment')}
                // onClick={(e) => doCharge()} 
                className="cursor-pointer"
            >
                <img className="slide-img rounded-md" src="/slider/bank-payment.jpg" alt="„ÅäÂπ¥ÁéâÂè≤‰∏äÊúÄÈ´òÈ°ç„ÅÆ7,480,000pt„ÇíÂºï„ÅçÂΩì„Å¶„Åü„ÅÆ„ÅØÔºÅÔºü | „Ç´„Éº„Éá„É´ „Ç™„É™„ÉëÂÖ¨Âºè„Çµ„Ç§„Éà`" />
            </SplideSlide>
            {/* <SplideSlide
                key='page-lillie'
                slide={`„ÅäÂπ¥ÁéâÂè≤‰∏äÊúÄÈ´òÈ°ç„ÅÆ7,480,000pt„ÇíÂºï„ÅçÂΩì„Å¶„Åü„ÅÆ„ÅØÔºÅÔºü | „Ç´„Éº„Éá„É´ „Ç™„É™„ÉëÂÖ¨Âºè„Çµ„Ç§„Éà`}
                onClick={() => navigate('/page-lillie')}
                className="cursor-pointer"
            >
                <img className="slide-img rounded-md" src="/opening-ceremonies/slide.png" alt="„ÅäÂπ¥ÁéâÂè≤‰∏äÊúÄÈ´òÈ°ç„ÅÆ7,480,000pt„ÇíÂºï„ÅçÂΩì„Å¶„Åü„ÅÆ„ÅØÔºÅÔºü | „Ç´„Éº„Éá„É´ „Ç™„É™„ÉëÂÖ¨Âºè„Çµ„Ç§„Éà`" />
            </SplideSlide> */}
            {/* Ê§úÁ¥¢ÁµêÊûú„ÅÆ„Çµ„Ç§„Éà„Çµ„É†„Éç„Ç§„É´„Åå„É©„Ç§„É≥„Å´„Å™„Å£„Å¶„Åó„Åæ„ÅÜ„ÅÆ„ÅßÊú´Â∞æ„Å´ÁßªÂãï„Åô„Çã */}
            <SplideSlide
                key='line'
                slide={`ÂÖ¨ÂºèLINE | „Ç´„Éº„Éá„É´ „Ç™„É™„ÉëÂÖ¨Âºè„Çµ„Ç§„Éà`}
                // onClick={() => window.open("https://lin.ee/GVlNQCl", '_blank')}
                onClick={() => window.open("https://lin.ee/pdg5Qj0", '_blank')}
                className="cursor-pointer"
                >
                    <img className="slide-img rounded-md" src="/line.jpg" alt="LINEÁôªÈå≤„ÅÆÊ°àÂÜÖ | „Ç´„Éº„Éá„É´ „Ç™„É™„ÉëÂÖ¨Âºè„Çµ„Ç§„Éà`" />
                </SplideSlide>
            </Splide>

            {/* ÁîªÂÉè„ÅÆÈ´ò„Åï„ÇíÊèÉ„Åà„Å¶Ë°®Á§∫„Åï„Åõ„Çã„Åü„ÇÅ„Å´‰ª•‰∏ã„Çπ„Çø„Ç§„É´„ÇíÈÅ©Áî® */}
            <style jsx>{`
                .slide-img {
                display: block;
                width: 100%;
                height: 100%;
                aspect-ratio: 3/2;
                object-fit: cover;
            }`}</style>
        </section>
    );
};


